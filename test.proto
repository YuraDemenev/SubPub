
// 2. Во второй части задания требуется с использованием пакета subpub из 1 части
// реализовать сервис подписок. Сервис работает по gRPC. Есть возможность подписаться на события по ключу и опубликовать события по ключу для всех подписчиков.
// Protobuf-схема дRPC сервиса:
import "google/protobuf/empty.proto";
syntax = "proto3";
service PubSub {
    // Подписка (сервер отправляет поток событий)
    rpc Subscribe(SubscribeRequest) returns (stream Event);

    // Публикация (классический запрос-ответ)
    rpc Publish(PublishRequest) returns (google.protobuf.Empty);
}

message SubscribeRequest {
    string key = 1;
}

message PublishRequest {
    string key = 1;
    string data = 2;
}
message Event { 
    string data=1;
}

// Также пользуйся стандартными статус-кодами gRPC из пакетов И
// google.golang.org/grpc/status
// google.golang.org/grpc/codes в качестве критериев успешности и неуспешности запросов к сервису. Что еще ожидается в решении:
// • Обязательно должно быть описание того, как работает сервис и как его собирать.
// • У сервиса должен быть свой конфиг, куда можно прописать порты и прочие параметры (на ваше усмотрение).
// • Логирование.
// • Приветствуется использование известных паттернов при разработке микросервисов на Со (например, dependency injection, graceful shutdown и пр.). Если таковые будут использоваться, то просьба упомянуть его в описании решения.