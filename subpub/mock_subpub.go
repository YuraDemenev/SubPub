// Code generated by MockGen. DO NOT EDIT.
// Source: subpub/subpub.go

// Package subpub is a generated GoMock package.
package subpub

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Unsubscribe mocks base method.
func (m *MockSubscription) Unsubscribe() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Unsubscribe")
}

// Unsubscribe indicates an expected call of Unsubscribe.
func (mr *MockSubscriptionMockRecorder) Unsubscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Unsubscribe", reflect.TypeOf((*MockSubscription)(nil).Unsubscribe))
}

// MockSubPub is a mock of SubPub interface.
type MockSubPub struct {
	ctrl     *gomock.Controller
	recorder *MockSubPubMockRecorder
}

// MockSubPubMockRecorder is the mock recorder for MockSubPub.
type MockSubPubMockRecorder struct {
	mock *MockSubPub
}

// NewMockSubPub creates a new mock instance.
func NewMockSubPub(ctrl *gomock.Controller) *MockSubPub {
	mock := &MockSubPub{ctrl: ctrl}
	mock.recorder = &MockSubPubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubPub) EXPECT() *MockSubPubMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSubPub) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockSubPubMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSubPub)(nil).Close), ctx)
}

// Publish mocks base method.
func (m *MockSubPub) Publish(subject string, msg interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", subject, msg)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockSubPubMockRecorder) Publish(subject, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockSubPub)(nil).Publish), subject, msg)
}

// Subscribe mocks base method.
func (m *MockSubPub) Subscribe(subject string, cb MessageHandler) (Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe", subject, cb)
	ret0, _ := ret[0].(Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockSubPubMockRecorder) Subscribe(subject, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockSubPub)(nil).Subscribe), subject, cb)
}
